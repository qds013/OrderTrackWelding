import logging
import telebot
from todoist_api_python.api import TodoistAPI

from ___tgtoken import tgtoken
from ___tdtoken import tdtoken

# setting up logger
logger = telebot.logger
telebot.logger.setLevel(logging.INFO)

# workaround to prevent disconnect on timeout
telebot.apihelper.SESSION_TIME_TO_LIVE = 5 * 60

# creating telegram bot
bot = telebot.TeleBot(tgtoken)
# creating todoist connection
todoist = TodoistAPI(tdtoken)

# hadling 'start' command
@bot.message_handler(commands = ['start'])
def bot_send_welcome(message):
    message_text = """
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤!

    –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–æ–º–µ—Ä.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
    """
    bot.reply_to(message, message_text)

# handling 'help' command
@bot.message_handler(commands=['help'])
def bot_send_help(message):
    message_text = """
    –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç:
    1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞
    2. –ü–æ–ª—É—á–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ

    –ü—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞: ORDER123

    !!! –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: ORDER123 –∏ ORDER456

    –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –º–µ–Ω–µ–¥–∂–µ—Ä—É.
    """
    bot.reply_to(message, message_text)

#handling any input as order number
@bot.message_handler(func = lambda message: True)
def bot_check_order(message):
    order_number = message.text.strip().upper()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {order_number} –æ—Ç: {message.from_user.username}")
    # bot.reply_to(message, "–ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ " + order_number)

    if not validate_order_number(order_number):
        logger.info(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ {order_number}")
        bot.reply_to(message, "üî¥ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return
    
    try:
        # print("Gettings projects for token: " + tdtoken)
        # projects = todoist.get_projects()
        # print(projects)
        # print("Gettings tasks for project: " + "2345348084")
        tasks = todoist.get_tasks(project_id = "2345348084")
        # print(tasks)

        order_task = None
        for task in tasks:
            if order_number == task.content.upper():
                order_task = task
                # print(order_task)
                break
        if order_task:
            labels = order_task.labels
            logger.info(f"–ó–∞–∫–∞–∑ {order_number} —Å—Ç–∞—Ç—É—Å {', ' . join(labels)}")
            response = f"üì¶ –ó–∞–∫–∞–∑ ‚Ññ{order_number}\n"
            response += f"üìã –°—Ç–∞—Ç—É—Å: {', ' . join(labels)}\n"
            bot.reply_to(message, response)    
        else:
            logger.info(f"–ó–∞–∫–∞–∑ {order_number} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            bot.reply_to(message, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ {order_number}: {str(e)}")
        response = f"üî¥ –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞ ‚Ññ{order_number} . –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
        bot.reply_to(message, response)

# handling any incoming text by echo message
"""
@bot.message_handler(content_types=["text"])
def echo(message):
    bot.send_message(message.chat.id, message.text)
    print("*** Message arrived: " + message.text)
"""

def validate_order_number(order_number):
    # return(order_number == "ORDER123")
    return True

# –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    try:
        logger.info("Telegram bot started...")
        bot.polling(non_stop=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
    finally:
        logger.info("Telegram bot exited.")
